import fs from 'fs';
import path from 'path';
import { defineEventHandler, createError, readBody } from 'h3';
import archiver from 'archiver';

export default defineEventHandler(async (event) => {
  const body = await readBody(event);
  const { filenames } = body;

  if (!Array.isArray(filenames) || filenames.length === 0) {
    return createError({ statusCode: 400, statusMessage: 'Filenames nécessaire' });
  }

  const uploadDir = path.join(process.cwd(), 'server', 'api', 'bdd', 'uploads');
  const zipFilePath = path.join(uploadDir, 'fichier.zip');

  try {
    const output = fs.createWriteStream(zipFilePath);
    const archive = archiver('zip', { zlib: { level: 9 } });

    output.on('close', () => {
      console.log(`${archive.pointer()} total bytes`);
    });

    archive.on('error', (err) => {
      console.error('Erreur de l\'archiver:', err);
      throw createError({ statusCode: 500, statusMessage: 'Erreur lors de l\'archivage des fichiers' });
    });

    archive.pipe(output);

    for (const filename of filenames) {
      const filePath = path.join(uploadDir, filename);
      if (fs.existsSync(filePath)) {
        archive.file(filePath, { name: filename });
      } else {
        console.warn(`Fichier non trouvé: ${filePath}`);
        throw createError({ statusCode: 404, statusMessage: `Fichier non trouvé: ${filename}` });
      }
    }

    await archive.finalize();

    await new Promise((resolve, reject) => {
      output.on('close', resolve);
      output.on('error', reject);
    });

    const zipFile = await fs.promises.readFile(zipFilePath);
    return zipFile;

  } catch (error) {
    console.error('Erreur lors de la création du fichier ZIP:', error);
    throw createError({ statusCode: 500, statusMessage: 'Erreur lors de la création du fichier ZIP' });
  }
});

<template>
  <div class="bgg">
    <!-- Autres éléments de la page -->
    <div v-if="errorMessage" class="alert alert-danger" role="alert">
      {{ errorMessage }}
    </div>
    <div class="tbl-container">
      <h1>Téléchargement de fichiers</h1>
      <!-- Le reste de votre template -->

      <div class="text-center mb-4">
        <button class="btn btn-primary validerCouleur" @click="generateFile" type="button">
          Générer Fichier
        </button>
      </div>
    </div>
  </div>
</template>

<script setup>
import { onMounted, ref } from 'vue';

// Déclaration des références réactives pour les items, la date de début et la date de fin
const items = ref([]);
const dateFrom = ref(null);
const dateTo = ref(null);
const errorMessage = ref(null); // Référence réactive pour stocker les messages d'erreur

// Cette fonction est exécutée lorsque le composant est monté
onMounted(async () => {
  try {
    // Récupération des données de l'API
    const response = await fetch('/api/bdd/tableau');
    if (!response.ok) {
      throw new Error('Erreur lors de la récupération des données');
    }

    const data = await response.json();
    console.log("Data récupérées de l'API:", data);

    if (Array.isArray(data) && data.length > 0) {
      items.value = data;

      const table = $('#table');
      table.bootstrapTable({
        data: items.value,
      });
    } else {
      console.error("Données récupérées non valides");
    }
  } catch (error) {
    console.error('Erreur lors de la récupération des données:', error.message);
    errorMessage.value = 'Erreur lors de la récupération des données. Veuillez réessayer plus tard.';
  }
});

// Fonction pour appliquer un filtre de date au tableau
const applyDateFilter = () => {
  // Le code pour appliquer le filtre de date reste inchangé
};

// Fonction pour générer et télécharger un fichier ZIP contenant les fichiers sélectionnés
const generateFile = async () => {
  try {
    const selectedRows = $('#table').bootstrapTable('getSelections');
    if (selectedRows.length === 0) {
      alert('Veuillez sélectionner au moins un fichier.');
      return;
    }

    const filenames = selectedRows.map(row => row.nomfichier);

    const response = await fetch('/api/bdd/donload', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ filenames }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.statusMessage || 'Erreur lors du téléchargement des fichiers.');
    }

    const blob = await response.blob();
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'FichiersPaiement.zip';
    document.body.appendChild(a);
    a.click();
    a.remove();
  } catch (error) {
    console.error('Erreur lors de la génération du fichier ZIP:', error.message);
    errorMessage.value = error.message;
  }
};


</script>

<style lang="scss" scoped>
/* Votre style reste inchangé */
</style>

tableau.ts
import { promises as fs } from 'fs';
import path from 'path';
import { defineEventHandler, createError } from 'h3';

export default defineEventHandler(async (event) => {
  const uploadDir = path.join(process.cwd(), 'server', 'api', 'bdd', 'uploads');
  
  try {
    const files = await fs.readdir(uploadDir);
    
    if (!files.length) {
      throw createError({ statusCode: 404, statusMessage: 'Aucun fichier trouvé dans le répertoire' });
    }

    const fileData = await Promise.all(
      files.map(async (file, index) => {
        try {
          const filePath = path.join(uploadDir, file);
          const stats = await fs.stat(filePath);
          return {
            id: index + 1,
            nomfichier: file,
            category: '???',
            date: stats.mtime.toISOString(),
          };
        } catch (error) {
          console.error(`Erreur lors de la récupération des informations du fichier: ${file}`, error);
          throw createError({ statusCode: 500, statusMessage: `Erreur lors de la récupération des informations du fichier: ${file}` });
        }
      })
    );

    return fileData;
  } catch (error) {
    console.error('Erreur lors de la récupération des fichiers du répertoire', error);
    throw createError({ statusCode: 500, statusMessage: 'Erreur lors de la récupération des fichiers du répertoire' });
  }
});

<template>
  <div class="bgg">
    <div class="tbl-container">
      <h1>Téléchargement de fichiers</h1>
      <div class="tbl-filters">
        <!-- Votre filtre de recherche existant -->
      </div>

      <div class="w-75 m-auto">
        <div v-if="errorMessage" class="alert alert-danger" role="alert">
          {{ errorMessage }}
        </div>
        <table
          id="table"
          data-filter-control-container="#filter"
          data-toggle="table"
          data-pagination="true"
          data-cookie="true"
          data-search="true"
          data-cookie-id-table="saveId"
          data-filter-control="true"
          data-search-highlight="true"
          data-click-to-select="true"
          data-search-selector="#customSearch"
        >
          <thead class="table-dark">
            <tr>
              <th data-checkbox="true" data-field="check"></th>
              <th data-field="id">ID</th>
              <th data-field="nomfichier" data-searchable="true" data-click-to-select="true">Nom fichier</th>
              <th data-field="category" data-filter-control="select">Catégorie</th>
              <th data-field="date" data-sortable="true" data-searchable="false">Date mise en ligne</th>
            </tr>
          </thead>
        </table>
        <div class="text-center mb-4">
          <button class="btn btn-primary validerCouleur" @click="generateFile" type="button">
            Générer Fichier
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { onMounted, ref } from 'vue';

// Déclaration des références réactives pour les items, la date de début et la date de fin
const items = ref([]);
const dateFrom = ref(null);
const dateTo = ref(null);
const errorMessage = ref(null); // Référence réactive pour stocker les messages d'erreur

// Cette fonction est exécutée lorsque le composant est monté
onMounted(async () => {
  try {
    // Récupération des données de l'API
    const response = await fetch('/api/bdd/tableau');
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.statusMessage || 'Erreur lors de la récupération des données');
    }

    const data = await response.json();
    console.log("Data récupérées de l'API:", data);

    if (Array.isArray(data) && data.length > 0) {
      items.value = data;

      const table = $('#table');
      table.bootstrapTable({
        data: items.value,
      });
    } else {
      console.error("Données récupérées non valides");
      errorMessage.value = "Aucun fichier trouvé dans le répertoire.";
    }
  } catch (error) {
    console.error('Erreur lors de la récupération des données:', error.message);
    errorMessage.value = error.message;
  }
});

// Fonction pour appliquer un filtre de date au tableau
const applyDateFilter = () => {
  // Le code pour appliquer le filtre de date reste inchangé
};

// Fonction pour générer et télécharger un fichier ZIP contenant les fichiers sélectionnés
const generateFile = async () => {
  try {
    const selectedRows = $('#table').bootstrapTable('getSelections');
    if (selectedRows.length === 0) {
      alert('Veuillez sélectionner au moins un fichier.');
      return;
    }

    const filenames = selectedRows.map(row => row.nomfichier);

    const response = await fetch('/api/bdd/donload', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ filenames }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.statusMessage || 'Erreur lors du téléchargement des fichiers.');
    }

    const blob = await response.blob();
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'FichiersPaiement.zip';
    document.body.appendChild(a);
    a.click();
    a.remove();
  } catch (error) {
    console.error('Erreur lors de la génération du fichier ZIP:', error.message);
    errorMessage.value = error.message;
  }
};
</script>

<style lang="scss" scoped>
/* Votre style reste inchangé */
</style>

