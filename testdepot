<script setup>
import { onMounted, ref } from 'vue';

// Déclaration des références réactives pour les items, la date de début et la date de fin
const items = ref([]);
const dateFrom = ref(null);
const dateTo = ref(null);
const errorMessage = ref(null); // Référence réactive pour stocker les messages d'erreur

// Cette fonction est exécutée lorsque le composant est monté
onMounted(async () => {
  try {
    // Récupération des données de l'API
    const response = await fetch('/api/bdd/tableau');
    if (!response.ok) {
      throw new Error('Erreur lors de la récupération des données');
    }

    const data = await response.json();
    console.log("Data récupérées de l'API:", data);

    // Vérification si les données récupérées sont un tableau non vide
    if (Array.isArray(data) && data.length > 0) {
      items.value = data; // Mise à jour des items avec les données récupérées
      console.log("Items données", items.value);

      // Initialisation du tableau Bootstrap avec les données récupérées
      const table = $('#table');
      table.bootstrapTable({
        data: items.value,
      });
    } else {
      console.error("Données récupérées non valides");
    }
  } catch (error) {
    console.error('Erreur lors de la récupération des données:', error.message);
    errorMessage.value = 'Erreur lors de la récupération des données. Veuillez réessayer plus tard.';
  }
});

// Fonction pour appliquer un filtre de date au tableau
const applyDateFilter = () => {
  // Le code pour appliquer le filtre de date reste inchangé
};

// Fonction pour générer et télécharger un fichier ZIP contenant les fichiers sélectionnés
const generateFile = async () => {
  // Le code pour générer et télécharger le fichier ZIP reste inchangé
};
</script>

<div v-if="errorMessage" class="alert alert-danger" role="alert">
  {{ errorMessage }}
</div>