<script setup lang="ts">
import { ref } from "vue";
import { useFetch } from "nuxt/app"; // Assurez-vous d'avoir installé le module Nuxt 3 pour ce type d'utilisation

const categories = ref<string[]>(["Catégorie 1", "Catégorie 2", "Catégorie 3"]);
const selectedCategory = ref<string>("");
const depositedFiles = ref<{ name: string; category: string; file: File }[]>([]);
const fileStatuses = ref<{ name: string; success: boolean; error?: string }[]>([]);

const uploadFiles = () => {
  if (selectedCategory.value === "") {
    alert("Veuillez sélectionner une catégorie.");
    return;
  }

  const input = document.querySelector('input[type="file"]') as HTMLInputElement;
  const files = Array.from(input.files as FileList);
  if (files.length === 0) {
    alert("Veuillez sélectionner au moins un fichier.");
    return;
  }

  files.forEach((file) => {
    depositedFiles.value.push({ name: file.name, category: selectedCategory.value, file });
  });

  input.value = "";
};

const removeFile = (index: number) => {
  depositedFiles.value.splice(index, 1);
};

const sendFilesToServer = async () => {
  const formData = new FormData();
  let totalSize = 0;

  depositedFiles.value.forEach((file, i) => {
    formData.append("files" + i, file.file);
    totalSize += file.file.size;
  });

  let uploadedSize = 0;
  fileStatuses.value = []; // Reset file statuses

  const progressBar = document.querySelector(".progress-bar") as HTMLElement;

  try {
    for (const file of depositedFiles.value) {
      formData.append("file", file.file);

      const response = await fetch("/api/bdd/depot", {
        method: "POST",
        body: formData,
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Erreur inconnue');
      }

      uploadedSize += file.file.size;
      const progress = (uploadedSize / totalSize) * 100;
      progressBar.style.width = `${progress}%`;
      progressBar.setAttribute("aria-valuenow", progress.toString());

      fileStatuses.value.push({ name: file.name, success: true });

      // Remove the file from formData after uploading
      formData.delete("file");
    }

    alert("Envoi terminé. Voir les statuts pour plus de détails.");
  } catch (error) {
    console.error("Erreur lors de l'envoi des fichiers:", error);
    fileStatuses.value.push({ name: "Erreur globale", success: false, error: error instanceof Error ? error.message : String(error) });
  } finally {
    depositedFiles.value = [];
    setTimeout(() => {
      progressBar.style.width = '0%'; // Réinitialiser la barre de progression
    }, 5000); // Délai de 5 secondes avant de réinitialiser la barre de progression
  }
};
</script>