<script setup lang="ts">
import { ref } from "vue";

const categories = ref<string[]>(["Catégorie 1", "Catégorie 2", "Catégorie 3"]);
const selectedCategory = ref<string>("");
const depositedFiles = ref<{ name: string; category: string; file: File }[]>([]);
const fileStatuses = ref<{ name: string; status: string; error?: string }[]>([]);

const uploadFiles = () => {
  // (Le reste du code reste inchangé)
};

const removeFile = (index: number) => {
  depositedFiles.value.splice(index, 1);
};

const sendFilesToServer = async () => {
  const formData = new FormData();
  let totalSize = 0;

  depositedFiles.value.forEach((file, i) => {
    formData.append("files" + i, file.file);
    totalSize += file.file.size;
  });

  let uploadedSize = 0;

  for (const file of depositedFiles.value) {
    try {
      const response = await useFetch("/api/bdd/depot", {
        method: "POST",
        body: formData,
      });

      if (!response.ok) {
        throw new Error('Erreur lors de l\'envoi du fichier.');
      }

      const result = await response.json();

      result.files.forEach((resFile: any) => {
        fileStatuses.value.push({
          name: resFile.name,
          status: resFile.success ? 'success' : 'error',
          error: resFile.error,
        });
      });

      uploadedSize += file.file.size;
      const progress = (uploadedSize / totalSize) * 100;

      const progressBar = document.querySelector(".progress-bar") as HTMLElement;
      progressBar.style.transition = "width 0.1s ease";
      progressBar.style.width = `${progress}%`;
      progressBar.setAttribute("aria-valuenow", progress.toString());

      await new Promise((resolve) => setTimeout(resolve, 50));
    } catch (error) {
      console.error("Erreur lors de l'envoi des fichiers:", error);
      fileStatuses.value.push({
        name: file.name,
        status: 'error',
        error: error.message,
      });
    }

    formData.delete("files" + depositedFiles.value.indexOf(file));
  }
  alert("Fichiers envoyés avec succès");
  depositedFiles.value = [];
};
</script>
<template>
  <div class="bgg">
    <div class="container">
      <h1>Déposer des fichiers</h1>

      <div class="row mt-4">
        <div class="col-md-6">
          <div class="card">
            <div class="card-body">
              <h5 class="card-title">Sélectionner les fichiers à déposer</h5>

              <input type="file" class="form-control" id="inputGroupFile01" multiple @change="uploadFiles" />

              <div class="mt-3">
                <label for="categorySelect" class="form-label">Choisir la catégorie :</label>
                <select class="form-select" id="categorySelect" v-model="selectedCategory">
                  <option value="">Sélectionner une catégorie</option>

                  <option v-for="category in categories" :value="category" :key="category">{{ category }}</option>
                </select>
              </div>

              <button class="btn btn-primary mt-3" @click="uploadFiles">Déposer les fichiers</button>
            </div>
          </div>
        </div>

        <div class="ICI">
          <div class="card mt-3" v-if="depositedFiles.length > 0">
            <div class="card-body">
              <h3 class="card-title d-flex justify-content-center">Fichiers déposés</h3>
              <div class="row mt-4">
                <div v-for="(file, index) in depositedFiles" :key="index" class="col-6 mb-5">
                  <div class="card h-100">
                    <div class="card-body">
                      <h6>
                        {{ file.name }}
                        <button class="btn btn-danger btn-sm" @click="removeFile(index)">Supprimer</button>
                      </h6>
                      <span class="badge bg-secondary">{{ file.category }}</span>
                    </div>
                  </div>
                </div>
              </div>

              <div class="d-flex justify-content-center">
                <button class="btn btn-success mt-3" @click="sendFilesToServer">Envoyer les fichiers</button>
              </div>

              <div>
                <p class="mt-4"></p>

                <div
                  class="progress"
                  role="progressbar"
                  aria-label="Animated striped example"
                  aria-valuenow="75"
                  aria-valuemin="0"
                  aria-valuemax="100"
                >
                  <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 0%"></div>
                </div>
              </div>
            </div>
          </div>

          <div class="alert alert-info mt-4 w-50" role="alert" v-else>Aucun fichier déposé.</div>
        </div>
      </div>

      <div class="row mt-4">
        <div class="col-md-12">
          <div class="card">
            <div class="card-body">
              <h3 class="card-title">Statut des fichiers envoyés</h3>
              <ul>
                <li v-for="status in fileStatuses" :key="status.name">
                  <span>{{ status.name }}</span>
                  <span v-if="status.status === 'success'" class="text-success">✔</span>
                  <span v-if="status.status === 'error'" class="text-danger">❌ {{ status.error }}</span>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

import fs from 'fs';
import path from 'path';

export default defineEventHandler(async (event) => {
  const formData = await readMultipartFormData(event);
  
  if (formData === undefined || formData.length === 0) {
    return { message: 'Aucun fichier trouvé.' };
  }
 
  const results = [];

  try {
    const uploadsDirectory = path.join(process.cwd(), 'server', 'api', 'bdd', 'uploads');

    for (const file of formData) {
      const fileBuffer: Buffer = file.data;
      
      if (!file.filename) {
        console.error('Le nom du fichier est indéfini.');
        results.push({ name: 'undefined', success: false, error: 'Le nom du fichier est indéfini.' });
        continue;
      }

      const filePath = path.join(uploadsDirectory, file.filename);

      try {
        fs.writeFileSync(filePath, fileBuffer);
        results.push({ name: file.filename, success: true });
      } catch (error) {
        console.error(`Erreur lors de l'enregistrement du fichier: ${file.filename}`, error);
        results.push({ name: file.filename, success: false, error: error.message });
      }
    }

    return { message: 'Traitement terminé.', files: results };
  } catch (error) {
    console.error('Erreur lors de l\'enregistrement des fichiers :', error);
    return { message: 'Erreur lors de l\'enregistrement des fichiers.', files: results };
  }
});